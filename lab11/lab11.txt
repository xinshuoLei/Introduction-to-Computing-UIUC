Question 1: Describe the errors that occur when trying to assemble lab11.asm. Identify the cause of each error.

line 14: the operand x3000 does not have an opcode(.ORIG in this case) before it.
line 16: instruction appears before .ORIG. The programs is missing .ORIG.
line 17: LD only allows a 9-bits offset, but the operand x3010 is 16 bits long.
line 19: illegal opearands for ADD. The instruction contains an extra ',' after the first operand R3.
line 30: LD only allows a 9-bits offset, but the operand x30FF is 16 bits long.
line 32: The branch opcode has zp in reverse order. BRpz cannot be understood by the assembler so the assemlber 
thought OUTERLOOP indicates a label and gives an error because OUTERLOOP aleardy appeard before. 
line 35: label xxxx is not defined. The result should be stored in memory location specified by RESULT.
line 41: The program is missing .END.



Question 2: For each label in the code, write down the corresponding memory location. 

OUTERLOOP:   x3004
INNEERLOOP:  x3005
INPUT:       x300E
RESULT:      x3011



Question 3: Between using labels and explicit memory locations/offsets, which one makes the most sense, and why?

Using lables makes more sense. Labels are easier to read and write. We can quickly tell the location the instruction 
is referring to by looking up corresponding labels. For memory location/offsets, we need to calculate 
and count to get the address when reading or writing instructions. Also, memory locations/offsets need to be changed 
if the code has been modified. But when using labels, the assembler will calculate the correct offset automatically, 
which saves a lot of work.


